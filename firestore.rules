rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }

    match /users/{uid} {
      // Public read so unauthenticated clients can check username availability
      allow read: if true;
      allow create: if isOwner(uid)
        && request.resource.data.keys().hasOnly(['username','avatarUrl','createdAt'])
        && request.resource.data.username is string
        && request.resource.data.username.matches('^[a-z0-9_]{3,20}$')
        && request.resource.data.createdAt is timestamp;
      allow update: if isOwner(uid)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['username','avatarUrl'])
        && request.resource.data.username.matches('^[a-z0-9_]{3,20}$');
      allow delete: if false;
    }

    match /runs/{runId} {
      allow read: if true; // public leaderboard reads
      allow create: if signedIn()
        && request.resource.data.keys().hasOnly(['uid','username','mode','wpm','accuracy','errors','wpmSeries','createdAt'])
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.mode in [15,30,60]
        && request.resource.data.wpm is number && request.resource.data.wpm >= 0 && request.resource.data.wpm <= 400
        && request.resource.data.accuracy is number && request.resource.data.accuracy >= 0 && request.resource.data.accuracy <= 100
        && request.resource.data.errors is number && request.resource.data.errors >= 0 && request.resource.data.errors <= 200
        && request.resource.data.wpmSeries is list && request.resource.data.wpmSeries.size() <= 120
        && request.resource.data.createdAt is timestamp;
      allow update, delete: if false;
    }

    match /rooms/{roomId} {
      allow read: if signedIn();
      allow create: if signedIn()
        && request.resource.data.keys().hasOnly(['status','modeSeconds','seed','hostId','createdAt','startAt','passage','passageLength'])
        && request.resource.data.hostId == request.auth.uid
        && request.resource.data.modeSeconds in [15,30,60]
        && (request.resource.data.passage == null || (request.resource.data.passage is string && request.resource.data.passage.size() >= 20 && request.resource.data.passage.size() <= 20000))
        && (request.resource.data.passageLength == null || request.resource.data.passageLength in ['short','medium','long']);

      allow update: if signedIn()
        && resource.data.hostId == request.auth.uid
        && request.resource.data.hostId == resource.data.hostId
        && request.resource.data.modeSeconds == resource.data.modeSeconds
        // Only allow status/startAt to change
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','startAt'])
        // Enforce allowed status transitions and timing
        && (
          (
            // lobby -> countdown: must set a future startAt
            resource.data.status == 'lobby' && request.resource.data.status == 'countdown'
            && request.resource.data.startAt is timestamp
            && request.resource.data.startAt > request.time
          ) || (
            // countdown -> in_progress: cannot change startAt and start time must have passed
            resource.data.status == 'countdown' && request.resource.data.status == 'in_progress'
            && request.resource.data.startAt == resource.data.startAt
            && resource.data.startAt <= request.time
          ) || (
            // in_progress -> finished: allow host to end race at any time (passage completion)
            resource.data.status == 'in_progress' && request.resource.data.status == 'finished'
            && request.resource.data.startAt == resource.data.startAt
          )
        );

      allow delete: if false;

      match /players/{uid} {
        allow read: if signedIn();
        // Separate create/update to add throttling only on updates
        allow create: if isOwner(uid)
          && request.resource.data.keys().hasOnly(['uid','username','joinedAt','wpm','accuracy','inputLength','finishedAt','lastUpdate','progress'])
          && request.resource.data.uid == request.auth.uid
          && request.resource.data.username is string && request.resource.data.username.matches('^[a-z0-9_]{3,20}$')
          && (request.resource.data.wpm == null || (request.resource.data.wpm >= 0 && request.resource.data.wpm <= 400))
          && (request.resource.data.accuracy == null || (request.resource.data.accuracy >= 0 && request.resource.data.accuracy <= 100))
          && (request.resource.data.inputLength == null || (request.resource.data.inputLength is number && request.resource.data.inputLength >= 0 && request.resource.data.inputLength <= 10000))
          && (request.resource.data.progress == null || (request.resource.data.progress is number && request.resource.data.progress >= 0 && request.resource.data.progress <= 1));

        allow update: if isOwner(uid)
          && request.resource.data.keys().hasOnly(['uid','username','joinedAt','wpm','accuracy','inputLength','finishedAt','lastUpdate','progress'])
          && request.resource.data.uid == request.auth.uid
          && request.resource.data.username is string && request.resource.data.username.matches('^[a-z0-9_]{3,20}$')
          && (request.resource.data.wpm == null || (request.resource.data.wpm >= 0 && request.resource.data.wpm <= 400))
          && (request.resource.data.accuracy == null || (request.resource.data.accuracy >= 0 && request.resource.data.accuracy <= 100))
          && (request.resource.data.inputLength == null || (request.resource.data.inputLength is number && request.resource.data.inputLength >= 0 && request.resource.data.inputLength <= 10000))
          && (request.resource.data.progress == null || (request.resource.data.progress is number && request.resource.data.progress >= 0 && request.resource.data.progress <= 1))
          // Allow username-only or joinedAt-only updates without throttling
          && (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['username']) ||
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['joinedAt']) ||
            // Otherwise throttle per-player updates to at most ~1 per second
            (resource.data.lastUpdate == null || request.time - resource.data.lastUpdate >= duration.value(1, 's'))
          );
        allow delete: if isOwner(uid) || (signedIn() && get(/databases/$(db)/documents/rooms/$(roomId)).data.hostId == request.auth.uid);
      }
    }
  }
}
